{"version":3,"sources":["components/SideBar.js","App.js","serviceWorker.js","index.js"],"names":["SideBar","props","locations","filter","closeMenu","bounceMarker","borough","react_default","a","createElement","id","value","aria-label","onChange","event","target","map","location","key","name","className","onClick","App","state","styles","infowindow","toggleMenu","renderMap","window","initMap","_this","initScript","url","body","document","getElementsByTagName","script","src","async","defer","onerror","alert","appendChild","mapstyles","google","maps","InfoWindow","Map","getElementById","center","lat","lng","zoom","maxZoom","mapTypeControl","gm_authFailure","setState","initMarkers","marker","Marker","position","addListener","showMarkers","bounds","LatLngBounds","extend","setAnimation","Animation","DROP","setTimeout","setMap","fitBounds","hideMarkers","BOUNCE","setContent","concat","open","searchVenue","filterLocales","neighborhood","point","query","replace","venueDetailsURL","fetch","then","response","json","data","groups","items","venue","addedInfo","catch","error","console","log","undefined","image","bestPhoto","hours","status","prefix","width","suffix","street","cityState","toggleSwitch","openMenu","close","focus","this","_this2","_this$state","components_SideBar","role","aria-roledescription","href","Component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","src_App_0","URL","process","origin","addEventListener","contentType","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.051b8c6f.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nfunction SideBar(props) {\r\n  const {locations, filter, closeMenu, bounceMarker, borough} = props\r\n\r\n  // JSX map() function loops through the locations array and creates a new list item and button\r\n  return (\r\n    <section id=\"sidebar-container\">\r\n      <div id=\"sidebar\">\r\n        <select value={borough} aria-label=\"filter locations by neighborhood\" id=\"neighborhoods-select\" onChange={(event) => filter(event.target.value)}>\r\n          <option value=\"all\">All Neighborhoods</option>\r\n          <option value=\"brooklyn\">Brooklyn</option>\r\n          <option value=\"bronx\">The Bronx</option>\r\n          <option value=\"manhattan\">Manhattan</option>\r\n          <option value=\"staten island\">Staten Island</option>\r\n          <option value=\"queens\">Queens</option>\r\n        </select>\r\n\r\n        <ul id=\"list-locales\">\r\n          {locations.map(location => (\r\n            <li key={location.name}><button className=\"button-link\" onClick={() => bounceMarker(location)}>{location.name}</button></li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n\r\n      <div id=\"sidebar-overlay\" onClick={() => closeMenu()}>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nSideBar.propTypes = {\r\n  // verifies that the props are the correct data type\r\n  borough: PropTypes.string.isRequired,\r\n  locations: PropTypes.array.isRequired,\r\n  bounceMarker: PropTypes.func.isRequired,\r\n  closeMenu: PropTypes.func.isRequired,\r\n  filter: PropTypes.func.isRequired\r\n}\r\n\r\nexport default SideBar\r\n","import React, { Component } from 'react';\r\nimport locations from './data/locations.json';\r\nimport mapstyles from './data/mapstyles.json';\r\nimport SideBar from './components/SideBar'\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    locations: null,\r\n    styles: null,\r\n    map: null,\r\n    infowindow: null,\r\n    toggleMenu: false,\r\n    borough: 'all',\r\n  }\r\n\r\n  componentDidMount() {\r\n    // grabbing the locations and styles from their json files and putting in the state\r\n    this.setState({\r\n      locations: locations,\r\n      mapstyles: mapstyles\r\n    }, this.renderMap)\r\n  }\r\n\r\n  renderMap = () => {\r\n    // assinging the initMap to the global method so React can find it\r\n    window.initMap = this.initMap\r\n    this.initScript('https://maps.googleapis.com/maps/api/js?key=AIzaSyB1hMr_sGWDl_e8bK7Fg6YpCrO-eTbIz0E&callback=initMap')\r\n  }\r\n\r\n  initScript = (url) => {\r\n    // creating a script tag for the google map and appending it to the body tag\r\n    const body = window.document.getElementsByTagName('body')[0]\r\n    const script = window.document.createElement('script')\r\n    script.src = url\r\n    script.async = true\r\n    script.defer = true\r\n    script.onerror = () => window.alert('There was a problem loading the script. Please refresh the page.')\r\n    body.appendChild(script)\r\n  }\r\n\r\n  initMap = () => {\r\n    // initializing the map\r\n    const styles = this.state.mapstyles\r\n    let infowindow = new window.google.maps.InfoWindow()\r\n    let map = new window.google.maps.Map(\r\n      document.getElementById('map'), {\r\n        center: {lat: 40.7128, lng: -74.0060},\r\n        zoom: 10,\r\n        maxZoom: 15,\r\n        mapTypeControl: false,\r\n        styles: styles\r\n      })\r\n\r\n    window.gm_authFailure = () => window.alert('Authorization Failed. Please refresh the page or try again later.')\r\n\r\n    this.setState({\r\n      map: map,\r\n      infowindow: infowindow\r\n    }, this.initMarkers)\r\n  }\r\n\r\n  initMarkers = () => {\r\n    // had a problem with closures. couldn't define. this.bounceMarker inside an event listener,\r\n    // so I added it to the state\r\n    window.bounceMarker = this.bounceMarker\r\n\r\n    // creating a marker for every default location in the state and adding an event listener to each\r\n    let locations = this.state.locations\r\n    locations.map(location => {\r\n      let marker = new window.google.maps\r\n        .Marker({ position: location.position })\r\n\r\n      marker.addListener('click',\r\n        () => window.bounceMarker(location))\r\n\r\n      location.marker = marker\r\n      return null\r\n    })\r\n    this.setState({\r\n      locations: locations,\r\n    }, this.showMarkers)\r\n  }\r\n\r\n  showMarkers = () => {\r\n    // loops through each location and set's the marker's map to the map div in the DOM\r\n    // also resets the map's bounds to zoom in and out depending on which markers are in view\r\n    let map = this.state.map\r\n    let locations = this.state.locations\r\n    let bounds = new window.google.maps.LatLngBounds()\r\n\r\n    locations.map(location => {\r\n      bounds.extend(location.position)\r\n      location.marker.setAnimation(window.google.maps.Animation.DROP)\r\n      window.setTimeout(function() {\r\n        location.marker.setMap(map)\r\n      }, 1000)\r\n      return null\r\n    })\r\n    map.fitBounds(bounds)\r\n    this.setState({\r\n      locations: locations,\r\n      map: map\r\n    })\r\n  }\r\n\r\n  hideMarkers = () => {\r\n    // loops through all markers and set's their map to null\r\n    let locations = this.state.locations\r\n    locations.map(location => {\r\n      location.marker.setMap(null)\r\n      location.marker.setAnimation(null)\r\n      return null\r\n    })\r\n    this.setState({\r\n      locations: locations\r\n    })\r\n  }\r\n\r\n  bounceMarker = (location) => {\r\n    // takes the individual location and changes the animation type of its marker\r\n    // to bounce, opens the infowindow on that marker, and adds an event listener\r\n    // to the infowindow so that the animation stops when it is closed\r\n    let marker = location.marker\r\n    let map = this.state.map\r\n    let infowindow = this.state.infowindow\r\n    let locations = this.state.locations\r\n\r\n    locations.map(location => {\r\n      location.marker.setAnimation(null)\r\n      if (location.marker === marker) {\r\n        location.marker.setAnimation(window.google.maps.Animation.BOUNCE)\r\n        infowindow.setContent(`\r\n          <div>${location.name}</div>\r\n          <div><a href=\"${location.url}\">Visit their website</a></div>`)\r\n        infowindow.open(map, marker)\r\n        infowindow.addListener('closeclick', () => {\r\n          location.marker.setAnimation(null)\r\n        })\r\n      }\r\n      return null\r\n    })\r\n\r\n    this.setState({\r\n      locations: locations,\r\n      infowindow: infowindow,\r\n      toggleMenu: false\r\n    }, this.searchVenue(location))\r\n  }\r\n\r\n  filterLocales = (borough) => {\r\n    // changes the available place markers on the map and list view, depending on the selected borough\r\n    this.hideMarkers()\r\n    if (borough === 'all') {\r\n      this.setState({\r\n        locations: locations,\r\n        borough: 'all'\r\n      }, this.showMarkers)\r\n    } else {\r\n      this.setState({\r\n        locations: locations.filter(location => location.neighborhood === borough),\r\n        borough: borough\r\n      }, this.showMarkers)\r\n    }\r\n  }\r\n\r\n  searchVenue = (location) => {\r\n    // grabs the coordinates and location name of the selected place\r\n    // and formats it into a url for an API call\r\n    let point = location.position\r\n    let query = point.lat + ',' + point.lng\r\n    let name = location.name.replace(/\\s/g, '+')\r\n    let venueDetailsURL = null\r\n    let id = null\r\n    let url = `https://api.foursquare.com/v2/venues/explore?client_id=QS3H514QHDPTUOALBKTXWKXADRNN4OZBWQCLM5YNMIXZZNFI&client_secret=PCQ2V4XHFQ2K03OTZ522OJ2ZVLARL4KIEBR5M4LJSY1TLTIA&v=20180323&limit=1&intent=match&name=${name}&ll=${query}`\r\n\r\n    // fetches the call and formats the response for addedInfo()\r\n    fetch(url)\r\n      .then(response => response.json())\r\n      .then(data => id = data.response.groups[0].items[0].venue.id)\r\n      .then(id => {\r\n        venueDetailsURL = `https://api.foursquare.com/v2/venues/${id}?client_id=QS3H514QHDPTUOALBKTXWKXADRNN4OZBWQCLM5YNMIXZZNFI&client_secret=PCQ2V4XHFQ2K03OTZ522OJ2ZVLARL4KIEBR5M4LJSY1TLTIA&v=20180323`\r\n        return fetch(venueDetailsURL)\r\n      })\r\n      .then(response => response.json())\r\n      .then(data => this.addedInfo(location, data))\r\n      .catch(error => {\r\n        console.log(error)\r\n        return window.alert('Error: Data request failed. Please try again later.')\r\n      })\r\n  }\r\n\r\n  addedInfo = (location, data) => {\r\n    let infowindow = this.state.infowindow\r\n    let venue = data.response.venue\r\n\r\n    // IF the response is valid, the infowindow is updated to include the additional content\r\n    // otherwise the user is informed that no other information is currently available\r\n    if (venue !== undefined) {\r\n      let image = venue.bestPhoto\r\n      infowindow.setContent(`\r\n        <div>${location.name}</div>\r\n        <div>${venue.hours.status}</div>\r\n        <div><a href=\"${location.url}\">Visit their website</a></div>\r\n        <div id=\"added-info\"><img src=\"${(image.prefix + image.width + image.suffix)}\" alt=\"${location.name}\" id=\"added-info-img\"></div>\r\n      `)\r\n    } else {\r\n      infowindow.setContent(`\r\n        <div>${location.name}</div>\r\n        <div>${location.street}, ${location.cityState}</div>\r\n        <div><a href=\"${location.url}\">Visit their website</a></div>\r\n        <div>No information available, please check again later</div>\r\n      `)\r\n    }\r\n    this.setState({\r\n      infowindow: infowindow\r\n    })\r\n  }\r\n\r\n  toggleSwitch = () => {\r\n    // allows the user to toggle the sidebar's list view on and off\r\n    let menu = this.state.toggleMenu\r\n    if (menu === true) {\r\n      this.closeMenu()\r\n    } else {\r\n      this.openMenu()\r\n    }\r\n  }\r\n\r\n  openMenu = () => {\r\n    // opens the sidebar and the list view. any markers that were currently selected\r\n    // (and thus bouncing) has its animation set back to null and infowindow closed\r\n    let infowindow = this.state.infowindow\r\n    infowindow.close()\r\n\r\n    let locations = this.state.locations\r\n    locations.map(location => {\r\n      location.marker.setAnimation(null)\r\n      return null\r\n    })\r\n\r\n    this.setState({\r\n      locations: locations,\r\n      toggleMenu: true\r\n    })\r\n  }\r\n\r\n  closeMenu = () => {\r\n    // removes the sidebar and overlay and sets the focus back to the menu button\r\n    const menu = window.document.getElementById('menu')\r\n    menu.focus()\r\n    this.setState({\r\n      toggleMenu: false\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { toggleMenu, locations, borough } = this.state\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <button aria-label=\"menu button, click for list view\" id=\"menu\" onClick={() => this.toggleSwitch()}><i className=\"fas fa-bars\"></i></button>\r\n          <h1>\r\n            Kid Friendly Places In NYC\r\n          </h1>\r\n        </header>\r\n        <main>\r\n          {toggleMenu === true && (\r\n          <SideBar\r\n            locations={locations}\r\n            filter={this.filterLocales}\r\n            closeMenu={this.closeMenu}\r\n            bounceMarker={this.bounceMarker}\r\n            borough={borough} />\r\n          )}\r\n\r\n          <section id=\"map-container\">\r\n            <div id=\"map\" role=\"application\" aria-roledescription=\"map\" aria-label=\"map of new york city attractions\"></div>\r\n          </section>\r\n        </main>\r\n        <footer>Images and venue hours provided by <a href=\"https://foursquare.com/developers/\">Foursquare</a></footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}